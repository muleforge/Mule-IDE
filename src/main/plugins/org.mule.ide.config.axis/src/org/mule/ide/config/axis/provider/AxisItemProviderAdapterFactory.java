/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.mule.ide.config.axis.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.mule.ide.config.axis.util.AxisAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AxisItemProviderAdapterFactory extends AxisAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AxisItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.axis.AxisConnectorType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AxisConnectorTypeItemProvider axisConnectorTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.axis.AxisConnectorType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAxisConnectorTypeAdapter() {
		if (axisConnectorTypeItemProvider == null) {
			axisConnectorTypeItemProvider = new AxisConnectorTypeItemProvider(this);
		}

		return axisConnectorTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.axis.BeanTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeanTypeTypeItemProvider beanTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.axis.BeanTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeanTypeTypeAdapter() {
		if (beanTypeTypeItemProvider == null) {
			beanTypeTypeItemProvider = new BeanTypeTypeItemProvider(this);
		}

		return beanTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.axis.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.axis.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.axis.GlobalEndpointType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalEndpointTypeItemProvider globalEndpointTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.axis.GlobalEndpointType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalEndpointTypeAdapter() {
		if (globalEndpointTypeItemProvider == null) {
			globalEndpointTypeItemProvider = new GlobalEndpointTypeItemProvider(this);
		}

		return globalEndpointTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.axis.InboundEndpointType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InboundEndpointTypeItemProvider inboundEndpointTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.axis.InboundEndpointType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInboundEndpointTypeAdapter() {
		if (inboundEndpointTypeItemProvider == null) {
			inboundEndpointTypeItemProvider = new InboundEndpointTypeItemProvider(this);
		}

		return inboundEndpointTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.axis.OptionsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionsTypeItemProvider optionsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.axis.OptionsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionsTypeAdapter() {
		if (optionsTypeItemProvider == null) {
			optionsTypeItemProvider = new OptionsTypeItemProvider(this);
		}

		return optionsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.axis.OutboundEndpointType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutboundEndpointTypeItemProvider outboundEndpointTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.axis.OutboundEndpointType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutboundEndpointTypeAdapter() {
		if (outboundEndpointTypeItemProvider == null) {
			outboundEndpointTypeItemProvider = new OutboundEndpointTypeItemProvider(this);
		}

		return outboundEndpointTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.axis.SoapMethodType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoapMethodTypeItemProvider soapMethodTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.axis.SoapMethodType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoapMethodTypeAdapter() {
		if (soapMethodTypeItemProvider == null) {
			soapMethodTypeItemProvider = new SoapMethodTypeItemProvider(this);
		}

		return soapMethodTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.axis.SoapParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoapParameterTypeItemProvider soapParameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.axis.SoapParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoapParameterTypeAdapter() {
		if (soapParameterTypeItemProvider == null) {
			soapParameterTypeItemProvider = new SoapParameterTypeItemProvider(this);
		}

		return soapParameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.axis.SoapReturnType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoapReturnTypeItemProvider soapReturnTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.axis.SoapReturnType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoapReturnTypeAdapter() {
		if (soapReturnTypeItemProvider == null) {
			soapReturnTypeItemProvider = new SoapReturnTypeItemProvider(this);
		}

		return soapReturnTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.axis.SoapServiceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoapServiceTypeItemProvider soapServiceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.axis.SoapServiceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoapServiceTypeAdapter() {
		if (soapServiceTypeItemProvider == null) {
			soapServiceTypeItemProvider = new SoapServiceTypeItemProvider(this);
		}

		return soapServiceTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (axisConnectorTypeItemProvider != null) axisConnectorTypeItemProvider.dispose();
		if (beanTypeTypeItemProvider != null) beanTypeTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (globalEndpointTypeItemProvider != null) globalEndpointTypeItemProvider.dispose();
		if (inboundEndpointTypeItemProvider != null) inboundEndpointTypeItemProvider.dispose();
		if (optionsTypeItemProvider != null) optionsTypeItemProvider.dispose();
		if (outboundEndpointTypeItemProvider != null) outboundEndpointTypeItemProvider.dispose();
		if (soapMethodTypeItemProvider != null) soapMethodTypeItemProvider.dispose();
		if (soapParameterTypeItemProvider != null) soapParameterTypeItemProvider.dispose();
		if (soapReturnTypeItemProvider != null) soapReturnTypeItemProvider.dispose();
		if (soapServiceTypeItemProvider != null) soapServiceTypeItemProvider.dispose();
	}

}
