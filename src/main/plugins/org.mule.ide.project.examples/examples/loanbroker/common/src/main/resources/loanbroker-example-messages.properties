1=Request # {0} received: Client {1} with ssn = {2} requests a loan of amount = {3} for {4} months
2=Quote # {0} received: {1}
3=Returning Rate is: {0}
4={0}, rate: {1}
5=Processing quote: {0}
6=Lowest quote is: {0}
7=Credit profile # {0} received: score = {1}, history = {2}

10=Number or quotes received: {0}
11=Avg request: {0}
12=A result was not received, an error must have occurred. Check the logs.
13=Loan Consumer received a Quote: {0}
14=Exiting now
15=That response is not recognised, try again:
16=Enter your name: 
17=Enter loan Amount: 
18=Enter loan Duration in months: 
19=Failed to parse duration: {0}. Using random default
20=Failed to parse amount: {0}. Using random default
22=Enter number of requests: 
23=Number of requests must be at least 1
24=Request {0}: {1}

30=Welcome to the Mule Loan Broker ESB example. This example demonstrates using JMS, Web Services,\n Http/Rest and EJBs using an ESB architecture.\nFor more information see http://mule.mulesource.org/LoanBroker.\n\nThe example demonstrates integrating EJB applications in 2 ways -\n  1. Calling out to a remote EJB using a Mule Endpoint.\n  2. Managing an EJB as a Mule component.\n\nBoth have the same behavior but the second method allows a remote EJB to be used as if it were\n a local Mule component, thereby enabling tighter integration.\n\nPlease select [1], [2] or [q] quit: 
31=Loading 'Ejb via an Endpoint' version
32=Bye
33=Loading 'Managed Ejb Component' version
34=[1] make a loan request\n[q] quit\n\nPlease make your selection: 

40=Welcome to the Mule Loan Broker example
41=[1] make a loan request\n[2] send 100 random requests\n[3] send X random requests\n[q] quit\n\nPlease make your selection: 
42=Sent Async request
43=Which SOAP stack would you like to use: [a]xis or [x]fire?
44=Would you like to run the [s]ynchronous or [a]synchronous version?
45=Loading Asynchronous Loan Broker
46=Loading Synchronous Loan Broker
