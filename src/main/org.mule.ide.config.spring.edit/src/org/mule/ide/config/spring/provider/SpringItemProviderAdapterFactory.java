/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.mule.ide.config.spring.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.mule.ide.config.spring.util.SpringAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SpringItemProviderAdapterFactory extends SpringAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SpringItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.AliasType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AliasTypeItemProvider aliasTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.AliasType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAliasTypeAdapter() {
		if (aliasTypeItemProvider == null) {
			aliasTypeItemProvider = new AliasTypeItemProvider(this);
		}

		return aliasTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.ArgTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgTypeTypeItemProvider argTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.ArgTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgTypeTypeAdapter() {
		if (argTypeTypeItemProvider == null) {
			argTypeTypeItemProvider = new ArgTypeTypeItemProvider(this);
		}

		return argTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.BaseCollectionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BaseCollectionTypeItemProvider baseCollectionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.BaseCollectionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBaseCollectionTypeAdapter() {
		if (baseCollectionTypeItemProvider == null) {
			baseCollectionTypeItemProvider = new BaseCollectionTypeItemProvider(this);
		}

		return baseCollectionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.BeansType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeansTypeItemProvider beansTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.BeansType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeansTypeAdapter() {
		if (beansTypeItemProvider == null) {
			beansTypeItemProvider = new BeansTypeItemProvider(this);
		}

		return beansTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.BeanType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeanTypeItemProvider beanTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.BeanType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeanTypeAdapter() {
		if (beanTypeItemProvider == null) {
			beanTypeItemProvider = new BeanTypeItemProvider(this);
		}

		return beanTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.ConstructorArgType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstructorArgTypeItemProvider constructorArgTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.ConstructorArgType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstructorArgTypeAdapter() {
		if (constructorArgTypeItemProvider == null) {
			constructorArgTypeItemProvider = new ConstructorArgTypeItemProvider(this);
		}

		return constructorArgTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.DescriptionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DescriptionTypeItemProvider descriptionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.DescriptionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDescriptionTypeAdapter() {
		if (descriptionTypeItemProvider == null) {
			descriptionTypeItemProvider = new DescriptionTypeItemProvider(this);
		}

		return descriptionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.EntryType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntryTypeItemProvider entryTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.EntryType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntryTypeAdapter() {
		if (entryTypeItemProvider == null) {
			entryTypeItemProvider = new EntryTypeItemProvider(this);
		}

		return entryTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.IdrefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdrefTypeItemProvider idrefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.IdrefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdrefTypeAdapter() {
		if (idrefTypeItemProvider == null) {
			idrefTypeItemProvider = new IdrefTypeItemProvider(this);
		}

		return idrefTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.ImportType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportTypeItemProvider importTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.ImportType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportTypeAdapter() {
		if (importTypeItemProvider == null) {
			importTypeItemProvider = new ImportTypeItemProvider(this);
		}

		return importTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.KeyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyTypeItemProvider keyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.KeyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyTypeAdapter() {
		if (keyTypeItemProvider == null) {
			keyTypeItemProvider = new KeyTypeItemProvider(this);
		}

		return keyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.ListOrSetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListOrSetTypeItemProvider listOrSetTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.ListOrSetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListOrSetTypeAdapter() {
		if (listOrSetTypeItemProvider == null) {
			listOrSetTypeItemProvider = new ListOrSetTypeItemProvider(this);
		}

		return listOrSetTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.LookupMethodType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LookupMethodTypeItemProvider lookupMethodTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.LookupMethodType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLookupMethodTypeAdapter() {
		if (lookupMethodTypeItemProvider == null) {
			lookupMethodTypeItemProvider = new LookupMethodTypeItemProvider(this);
		}

		return lookupMethodTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.MapType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapTypeItemProvider mapTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.MapType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapTypeAdapter() {
		if (mapTypeItemProvider == null) {
			mapTypeItemProvider = new MapTypeItemProvider(this);
		}

		return mapTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.MetaType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetaTypeItemProvider metaTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.MetaType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetaTypeAdapter() {
		if (metaTypeItemProvider == null) {
			metaTypeItemProvider = new MetaTypeItemProvider(this);
		}

		return metaTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.NullType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullTypeItemProvider nullTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.NullType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullTypeAdapter() {
		if (nullTypeItemProvider == null) {
			nullTypeItemProvider = new NullTypeItemProvider(this);
		}

		return nullTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.PropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyTypeItemProvider propertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.PropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyTypeAdapter() {
		if (propertyTypeItemProvider == null) {
			propertyTypeItemProvider = new PropertyTypeItemProvider(this);
		}

		return propertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.PropsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropsTypeItemProvider propsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.PropsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropsTypeAdapter() {
		if (propsTypeItemProvider == null) {
			propsTypeItemProvider = new PropsTypeItemProvider(this);
		}

		return propsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.PropType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropTypeItemProvider propTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.PropType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropTypeAdapter() {
		if (propTypeItemProvider == null) {
			propTypeItemProvider = new PropTypeItemProvider(this);
		}

		return propTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.RefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefTypeItemProvider refTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.RefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefTypeAdapter() {
		if (refTypeItemProvider == null) {
			refTypeItemProvider = new RefTypeItemProvider(this);
		}

		return refTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.ReplacedMethodType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplacedMethodTypeItemProvider replacedMethodTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.ReplacedMethodType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplacedMethodTypeAdapter() {
		if (replacedMethodTypeItemProvider == null) {
			replacedMethodTypeItemProvider = new ReplacedMethodTypeItemProvider(this);
		}

		return replacedMethodTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.TypedCollectionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedCollectionTypeItemProvider typedCollectionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.TypedCollectionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedCollectionTypeAdapter() {
		if (typedCollectionTypeItemProvider == null) {
			typedCollectionTypeItemProvider = new TypedCollectionTypeItemProvider(this);
		}

		return typedCollectionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.mule.ide.config.spring.ValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueTypeItemProvider valueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.mule.ide.config.spring.ValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueTypeAdapter() {
		if (valueTypeItemProvider == null) {
			valueTypeItemProvider = new ValueTypeItemProvider(this);
		}

		return valueTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (aliasTypeItemProvider != null) aliasTypeItemProvider.dispose();
		if (argTypeTypeItemProvider != null) argTypeTypeItemProvider.dispose();
		if (baseCollectionTypeItemProvider != null) baseCollectionTypeItemProvider.dispose();
		if (beansTypeItemProvider != null) beansTypeItemProvider.dispose();
		if (beanTypeItemProvider != null) beanTypeItemProvider.dispose();
		if (constructorArgTypeItemProvider != null) constructorArgTypeItemProvider.dispose();
		if (descriptionTypeItemProvider != null) descriptionTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (entryTypeItemProvider != null) entryTypeItemProvider.dispose();
		if (idrefTypeItemProvider != null) idrefTypeItemProvider.dispose();
		if (importTypeItemProvider != null) importTypeItemProvider.dispose();
		if (keyTypeItemProvider != null) keyTypeItemProvider.dispose();
		if (listOrSetTypeItemProvider != null) listOrSetTypeItemProvider.dispose();
		if (lookupMethodTypeItemProvider != null) lookupMethodTypeItemProvider.dispose();
		if (mapTypeItemProvider != null) mapTypeItemProvider.dispose();
		if (metaTypeItemProvider != null) metaTypeItemProvider.dispose();
		if (nullTypeItemProvider != null) nullTypeItemProvider.dispose();
		if (propertyTypeItemProvider != null) propertyTypeItemProvider.dispose();
		if (propsTypeItemProvider != null) propsTypeItemProvider.dispose();
		if (propTypeItemProvider != null) propTypeItemProvider.dispose();
		if (refTypeItemProvider != null) refTypeItemProvider.dispose();
		if (replacedMethodTypeItemProvider != null) replacedMethodTypeItemProvider.dispose();
		if (typedCollectionTypeItemProvider != null) typedCollectionTypeItemProvider.dispose();
		if (valueTypeItemProvider != null) valueTypeItemProvider.dispose();
	}

}
